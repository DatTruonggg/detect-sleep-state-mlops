services:
    postgres-db:
        restart: always
        container_name: mlflow-backend
        image: postgres:14
        ports:
            - 5433:5432
        volumes:
            - ./src/database/postgres:/var/lib/postgresql/data/
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB} 
        healthcheck:
            test: ["CMD", "pg_isready", "-p", "${POSTGRES_PORT}", "-U", "${POSTGRES_USER}"]
            interval: 5s
            timeout: 5s
            retries: 3
        networks:
            - backend

    mlflow-tracking-server:
        restart: always
        build:
            context: .
            dockerfile: ./docker/dockerfile.mlflow
        image: mlflow-server
        container_name: mlflow-sever
        depends_on:
            - postgres-db
            - s3
        ports:
            - "${LOCAL_MLFLOW_SERVER_PORT}:5000"
        environment:
            - LOCAL_MLFLOW_SERVER_PORT=${LOCAL_MLFLOW_SERVER_PORT}
            - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
            - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
            - MLFLOW_S3_ENDPOINT_URL=http://s3:${MINIO_PORT}
            - MLFLOW_S3_IGNORE_TLS=true
        command: >
            mlflow server
            --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@mlflow-backend:${POSTGRES_PORT}/${POSTGRES_DB}
            --host 0.0.0.0
            --serve-artifacts
            --artifacts-destination s3://${MLFLOW_BUCKET_NAME}
        healthcheck:
            test: ["CMD", "curl", "-f", "http://${LOCAL_MLFLOW_SERVER_HOST}:5000/"]
            interval: 30s
            timeout: 10s
            retries: 3
        networks:
            - frontend
            - backend
    s3:
        restart: always
        container_name: mlflow-minio
        image: minio/minio
        volumes:
            - ./src/database/minio_data:/data
        environment:
            - MINIO_ROOT_USER=${MINIO_ROOT_USER}
            - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
            - MINIO_ADDRESS=${MINIO_ADDRESS}
            - MINIO_PORT=${MINIO_PORT}
            - MINIO_STORAGE_USE_HTTPS=${MINIO_STORAGE_USE_HTTPS}
            - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS}
        ports:
            - "${MINIO_PORT}:9000" # API S3
            - "${MINIO_CONSOLE_PORT}:9001" # MinIO Console
        command: server /data 
        healthcheck:
            test: ["CMD", "curl", "-f", "http://${LOCAL_MLFLOW_SERVER_HOST}:9000/minio/health/live"]
            interval: 30s
            timeout: 20s
            retries: 3    
        networks:
            - backend
            - frontend

    bucket-creator:
        image: minio/mc
        container_name: bucket-creator
        depends_on:
            s3: 
                condition: service_healthy
        networks:
            - backend
        entrypoint: >
            /bin/sh -c '
            sleep 20;
            /usr/bin/mc config host add s3 http://s3:${MINIO_PORT} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_ACCESS_KEY} --api S3v4;
            if ! /usr/bin/mc ls s3/${MLFLOW_BUCKET_NAME}; then
                /usr/bin/mc mb s3/${MLFLOW_BUCKET_NAME};
                /usr/bin/mc policy download s3/${MLFLOW_BUCKET_NAME};
            fi;
            exit 0;
            '
            
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge